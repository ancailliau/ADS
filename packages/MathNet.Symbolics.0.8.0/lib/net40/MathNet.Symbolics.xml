<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>MathNet.Symbolics</name></assembly>
<members>
<member name="M:MathNet.Symbolics.Algebraic.ExpandMain(MathNet.Symbolics.Expression)">
<summary>
 Algebraically expand the main operator of the expression only
</summary>
</member>
<member name="M:MathNet.Symbolics.Algebraic.Expand(MathNet.Symbolics.Expression)">
<summary>
 Algebraically expand the expression recursively
</summary>
</member>
<member name="M:MathNet.Symbolics.Algebraic.SeparateFactors(MathNet.Symbolics.Expression,MathNet.Symbolics.Expression)">
<summary>
 Splits a product into a tuple (free of a symbol, dependent on symbol)
</summary>
</member>
<member name="M:MathNet.Symbolics.Calculus.NormalLine(MathNet.Symbolics.Expression,MathNet.Symbolics.Expression,MathNet.Symbolics.Expression)">
<summary>
 Find normal line (perpendicular to tangent) function for expression(symbol) at symbol=value
</summary>
</member>
<member name="M:MathNet.Symbolics.Calculus.TangentLine(MathNet.Symbolics.Expression,MathNet.Symbolics.Expression,MathNet.Symbolics.Expression)">
<summary>
 Find tangent line function for expression(symbol) at symbol=value
</summary>
</member>
<member name="M:MathNet.Symbolics.Calculus.Taylor(System.Int32,MathNet.Symbolics.Expression,MathNet.Symbolics.Expression,MathNet.Symbolics.Expression)">
<summary>
 Taylor expansion of expression(symbol) at symbol=value of the first k terms
</summary>
</member>
<member name="M:MathNet.Symbolics.Calculus.DifferentiateAt(MathNet.Symbolics.Expression,MathNet.Symbolics.Expression,MathNet.Symbolics.Expression)">
<summary>
 Differentiate expression to symbol and substitute symbol with value
</summary>
</member>
<member name="M:MathNet.Symbolics.Exponential.Expand(MathNet.Symbolics.Expression)">
<summary>
 Expand exponential and logarithmic terms
</summary>
</member>
<member name="M:MathNet.Symbolics.ExpressionPatterns.|SinCos|_|(MathNet.Symbolics.Expression)">
<summary>
 Recognizes a sin or cos expression
</summary>
</member>
<member name="M:MathNet.Symbolics.ExpressionPatterns.|Terminal|_|(MathNet.Symbolics.Expression)">
<summary>
 Terminal node, either a number, identifier/symbol or constant (including infinity).
 Warning: Undefined is *not* included.
</summary>
</member>
<member name="M:MathNet.Symbolics.Infix.PrintToTextWriter(System.IO.TextWriter,MathNet.Symbolics.Expression)">
<summary>
 Nicer human readable but slightly denormalized output
</summary>
</member>
<member name="M:MathNet.Symbolics.Infix.Print(MathNet.Symbolics.Expression)">
<summary>
 Nicer human readable but slightly denormalized output
</summary>
</member>
<member name="M:MathNet.Symbolics.Infix.PrintStrictToTextWriter(System.IO.TextWriter,MathNet.Symbolics.Expression)">
<summary>
 Strict formatting, prints an exact representation of the expression tree
</summary>
</member>
<member name="M:MathNet.Symbolics.Infix.PrintStrict(MathNet.Symbolics.Expression)">
<summary>
 Strict formatting, prints an exact representation of the expression tree
</summary>
</member>
<member name="T:MathNet.Symbolics.Infix">
<summary>
 Print and parse infix expression string
</summary>
</member>
<member name="M:MathNet.Symbolics.LaTeX.Print(MathNet.Symbolics.Expression)">
<summary>
 LaTeX output
</summary>
</member>
<member name="M:MathNet.Symbolics.Numbers.|RealConstant|_|(MathNet.Symbolics.Expression)">
<summary>
 Represent the constant as a real number if possible
</summary>
</member>
<member name="M:MathNet.Symbolics.Polynomial.PartialFraction(MathNet.Symbolics.Expression,MathNet.Symbolics.Expression,Microsoft.FSharp.Collections.FSharpList{MathNet.Symbolics.Expression})">
<summary>
 Partial fraction decomposition (plumbing)
</summary>
</member>
<member name="M:MathNet.Symbolics.Polynomial.DiophantineGcd(MathNet.Symbolics.Expression,MathNet.Symbolics.Expression,MathNet.Symbolics.Expression,MathNet.Symbolics.Expression)">
<summary>
 Returns a tuple a, b such that a*u + b*v = w
</summary>
</member>
<member name="M:MathNet.Symbolics.Polynomial.halfDiophantineGcd(MathNet.Symbolics.Expression,MathNet.Symbolics.Expression,MathNet.Symbolics.Expression,MathNet.Symbolics.Expression)">
<summary>
 Returns a tuple a, b such that a*u = w (mod v)
</summary>
</member>
<member name="M:MathNet.Symbolics.Polynomial.ExtendedGcd(MathNet.Symbolics.Expression,MathNet.Symbolics.Expression,MathNet.Symbolics.Expression)">
<summary>
 Returns a tuple with gcd, a, b such that a*u + b*v = gcd(u,v)
</summary>
</member>
<member name="M:MathNet.Symbolics.Polynomial.HalfExtendedGcd(MathNet.Symbolics.Expression,MathNet.Symbolics.Expression,MathNet.Symbolics.Expression)">
<summary>
 Returns a tuple with the gcd and a such that a*u = gcd (mod v)
</summary>
</member>
<member name="M:MathNet.Symbolics.Polynomial.PseudoDivide(MathNet.Symbolics.Expression,MathNet.Symbolics.Expression,MathNet.Symbolics.Expression)">
<summary>
 Pseudo-division of polynomials (does not require coefficient divisibility and thus also supports integral domains).
 Returns a tuple with the pseudo-quotient q, pseudo-remainder r and factor b such that b*u = q*v+r.
</summary>
</member>
<member name="M:MathNet.Symbolics.Polynomial.Divide(MathNet.Symbolics.Expression,MathNet.Symbolics.Expression,MathNet.Symbolics.Expression)">
<summary>
 Euclidean division of polynomials.
 Returns a tuple with the quotient q and remainder such that u = q*v + r
</summary>
</member>
<member name="T:MathNet.Symbolics.Polynomial">
<summary>
 General Polynomial Expressions
</summary>
</member>
<member name="T:MathNet.Symbolics.Rational">
<summary>
 General Rational Expressions
</summary>
</member>
<member name="T:MathNet.Symbolics.SingleVariablePolynomial">
<summary>
 Single-Variable Polynomial (2*x+3*x^2)
</summary>
</member>
<member name="M:MathNet.Symbolics.Structure.CollectFunctionTypes(MathNet.Symbolics.Expression)">
<summary>
 Collects all functions of an expressions and returns their distinct function types.
</summary>
</member>
<member name="M:MathNet.Symbolics.Structure.CollectFunctions(MathNet.Symbolics.Expression)">
<summary>
 Collects all functions of an expressions and returns their distinct expressions.
</summary>
</member>
<member name="M:MathNet.Symbolics.Structure.CollectConstantValues(MathNet.Symbolics.Expression)">
<summary>
 Collects all constants of an expressions and returns their distinct values.
</summary>
</member>
<member name="M:MathNet.Symbolics.Structure.CollectConstants(MathNet.Symbolics.Expression)">
<summary>
 Collects all constants of an expressions and returns their distinct expressions.
</summary>
</member>
<member name="M:MathNet.Symbolics.Structure.CollectNumberValues(MathNet.Symbolics.Expression)">
<summary>
 Collects all numbers of an expressions and returns their distinct values.
</summary>
</member>
<member name="M:MathNet.Symbolics.Structure.CollectNumbers(MathNet.Symbolics.Expression)">
<summary>
 Collects all numbers of an expressions and returns their distinct expressions.
</summary>
</member>
<member name="M:MathNet.Symbolics.Structure.CollectIdentifierSymbols(MathNet.Symbolics.Expression)">
<summary>
 Collects all identifers of an expressions and returns their distinct symbols.
</summary>
</member>
<member name="M:MathNet.Symbolics.Structure.CollectIdentifiers(MathNet.Symbolics.Expression)">
<summary>
 Collects all identifers of an expressions and returns their distinct expressions.
</summary>
</member>
<member name="M:MathNet.Symbolics.Structure.CollectDistinct``1(Microsoft.FSharp.Core.FSharpFunc{MathNet.Symbolics.Expression,Microsoft.FSharp.Core.FSharpOption{``0}},MathNet.Symbolics.Expression)">
<summary>
 Like collect but returns each result at most once.
</summary>
</member>
<member name="M:MathNet.Symbolics.Structure.Collect``1(Microsoft.FSharp.Core.FSharpFunc{MathNet.Symbolics.Expression,Microsoft.FSharp.Core.FSharpOption{``0}},MathNet.Symbolics.Expression)">
<summary>
 Applies the given function to the expression tree and returns the result
 for each node where the function returns Some with some value.
 Subexpressions of an expression are only examined if the function returns
 None when applied to the expression.
 The results are returned as a list in reverse depth-first order.
</summary>
</member>
<member name="M:MathNet.Symbolics.Structure.SortList(Microsoft.FSharp.Collections.FSharpList{MathNet.Symbolics.Expression})">
<summary>
 Sort expressions in a list with standard expression ordering.
</summary>
</member>
<member name="M:MathNet.Symbolics.Trigonometric.SeparateFactors(MathNet.Symbolics.Expression)">
<summary>
 Splits a product into a tuple (rest, sin or cos or a positive integer power of them)
</summary>
</member>
</members>
</doc>
